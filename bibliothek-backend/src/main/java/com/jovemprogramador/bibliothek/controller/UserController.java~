package com.jovemprogramador.bibliothek.controller;

import com.jovemprogramador.bibliothek.domain.user.UserEntity;
import com.jovemprogramador.bibliothek.domain.user.UserResponseDTO;
import com.jovemprogramador.bibliothek.domain.user.UserService;
import lombok.RequiredArgsConstructor;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/user")
public class UserController {

    private final UserService userService;

    @GetMapping
    public List<UserEntity> findAll(){
        return userRepository.findAll();
    }

    @GetMapping("/{registration}")
    public ResponseEntity<UserResponseDTO> findById(@PathVariable String registration) {
        return ResponseEntity.ok(userService.findByRegistration(registration));
    }

    @PutMapping("/{matricula}/registration")
    public ResponseEntity<> updateRegistration(@PathVariable String matricula, @RequestBody UserEntity updatedUser) {
        UserEntity existingUser = repository.findByRegistration(matricula);
        if (existingUser == null) {
            return ResponseEntity.notFound().build();
        }
        existingUser.setRegistration(updatedUser.getRegistration());
        repository.save(existingUser);
        return ResponseEntity.ok().build();
    }

    @PutMapping("/{matricula}/foto")
    public ResponseEntity<?> updateFoto(@PathVariable String matricula, @RequestBody UserEntity updatedUser) {
        UserEntity existingUser = repository.findByRegistration(matricula);
        if (existingUser == null) {
            return ResponseEntity.notFound().build();
        }
        existingUser.setFotoPerfil(updatedUser.getFotoPerfil());
        repository.save(existingUser);
        return ResponseEntity.ok().build();
    }

    @PutMapping("/{matricula}/senha")
    public ResponseEntity<?> updateSenha(@PathVariable String matricula, @RequestBody UserEntity updatedUser) {
        UserEntity existingUser = repository.findByRegistration(matricula);
        if (existingUser == null) {
            return ResponseEntity.notFound().build();
        }
        String encryptedPassword = new BCryptPasswordEncoder().encode(updatedUser.getPassword());
        existingUser.setPassword(encryptedPassword);
        repository.save(existingUser);

        return ResponseEntity.ok().build();
    }

    @DeleteMapping("/{matricula}")
    public ResponseEntity<?> deleteUser(@PathVariable String matricula) {
        UserEntity existingUser = repository.findByRegistration(matricula);
        if (existingUser == null) {
            return ResponseEntity.notFound().build();
        }
        repository.delete(existingUser);

        return ResponseEntity.ok().build();
    }
}